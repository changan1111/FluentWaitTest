package com.healenium;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.FluentWait;

import io.github.bonigarcia.wdm.WebDriverManager;

import java.time.Duration;
import java.util.function.Function;

public class Fluent {

    public static void main(String[] args) {
        // Set the path to the ChromeDriver executable
		WebDriverManager.chromedriver().setup();

        // Configure Chrome options
        ChromeOptions options = new ChromeOptions();
        // Add any necessary options, such as disabling extensions or setting preferences

        // Create a new ChromeDriver instance
        WebDriver driver = new ChromeDriver(options);

        // Maximize the browser window
        driver.manage().window().maximize();

        // Navigate to your single-page application
        driver.get("https://www.example.com/");

        // Define FluentWait with a polling interval and timeout duration
        FluentWait<WebDriver> wait = new FluentWait<>(driver)
                .pollingEvery(Duration.ofMillis(500))
                .withTimeout(Duration.ofSeconds(10));

        // Wait until the page is fully loaded and the home button is visible
        wait.until((Function<WebDriver, Boolean>) webDriver -> {
            boolean isPageLoaded = ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete");
            WebElement homeButton = webDriver.findElement(By.id("login-input")); // Adjust the locator as per your application
            boolean isHomeButtonVisible = homeButton.isDisplayed();
            return isPageLoaded && isHomeButtonVisible;
        });

        // Calculate the page load time
        long loadTime = (Long) ((JavascriptExecutor) driver).executeScript("return window.performance.timing.loadEventEnd - window.performance.timing.navigationStart");
        System.out.println("Page Load Time: " + loadTime + " milliseconds");

        // Close the browser
        driver.quit();
    }

}

    private static void waitUntilPageLoadedAndHomeButtonVisible(WebDriver driver) {
        FluentWait<WebDriver> wait = new FluentWait<>(driver)
                .pollingEvery(Duration.ofMillis(500))
                .withTimeout(Duration.ofSeconds(10));

        wait.until((Function<WebDriver, Boolean>) webDriver -> {
            boolean isPageLoaded = ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete");
            WebElement homeButton = webDriver.findElement(By.id("login-input")); // Adjust the locator as per your application
            boolean isHomeButtonVisible = homeButton.isDisplayed();
            return isPageLoaded && isHomeButtonVisible;
        });
    }



wait.until(ExpectedConditions.and(
                webDriver -> ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete"),
                ExpectedConditions.visibilityOfElementLocated(locator)
        ));




    private static double getSPALoadTime(WebDriver driver) {
        JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;

        // Start the timer
        jsExecutor.executeScript("console.time('PageLoad');");

        // Perform the necessary actions to load the new content in your SPA

        // Stop the timer and capture the load time
        double loadTime = (double) jsExecutor.executeScript("console.timeEnd('PageLoad'); return window.performance.now();");

        return loadTime;
    }



package com.healenium;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ExtentReportUtils {
    private static ExtentReports extent;
    private static ThreadLocal<ExtentTest> extentTest = new ThreadLocal<>();
    private static String reportPath;

    public static void initializeExtentReport() {
        if (reportPath == null) {
            String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
            String projectDir = System.getProperty("user.dir");
            reportPath = projectDir + File.separator + "extent_report_" + timestamp + ".html";
            ExtentSparkReporter htmlReporter = new ExtentSparkReporter(reportPath);
            extent = new ExtentReports();
            extent.attachReporter(htmlReporter);
        }
    }

    public static ExtentTest createTest(String testName) {
        ExtentTest test = extent.createTest(testName);
        extentTest.set(test);
        return test;
    }

    public static ExtentTest getCurrentTest() {
        return extentTest.get();
    }

    public static void flushReport() {
        extent.flush();
    }
}


package com.healenium;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;

import java.io.File;
import java.io.IOException;

public class MyTestCase {
    private ExtentTest test;
    private WebDriver driver;

    @BeforeClass
    public void setup() {
        // Initialize Extent Report before starting the test case
        ExtentReportUtils.initializeExtentReport();

        // Create a new test instance
        test = ExtentReportUtils.createTest("My Test");

        // Initialize WebDriver (e.g., ChromeDriver, FirefoxDriver, etc.)
        driver = new ChromeDriver();
    }

    @Test
    public void testMethod() throws IOException {
        // Perform test assertions and log the results
        test.info("Starting testMethod");
        // ... Perform your test steps and assertions ...
        test.pass("testMethod Passed");

        // Capture screenshot
        File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

        // Convert screenshot to Base64
        String base64Screenshot = ExtentReportUtils.convertScreenshotToBase64(screenshotFile);

        // Attach screenshot to the Extent Report
        test.addScreenCaptureFromBase64String(base64Screenshot);

        // Attach additional logs or details if needed
        // ...
    }

    @AfterMethod
    public void tearDown() {
        // Quit WebDriver
        driver.quit();
    }

    @AfterClass
    public void finalizeReport() {
        // Flush the Extent Report after all test cases finish
        ExtentReportUtils.flushReport();
    }
}




package com.healenium;

import org.junit.jupiter.api.extension.AfterTestExecutionCallback;
import org.junit.jupiter.api.extension.ExtensionContext;

public class SPALoadTimeTestListener implements AfterTestExecutionCallback {

    private static ThreadLocal<Double> startTime = new ThreadLocal<>();

    @Override
    public void afterTestExecution(ExtensionContext context) {
        double loadTime = calculateLoadTime();
        System.out.println("Page Load Time: " + loadTime + " milliseconds");
    }

    public static double calculateLoadTime() {
        double endTime = System.currentTimeMillis();
        double startTimeValue = startTime.get();
        startTime.remove();
        double loadTime=endTime - startTimeValue;
        System.out.println(loadTime);
        return loadTime;
    }

    public static void startTimer() {
        startTime.set((double) System.currentTimeMillis());
    }
}

