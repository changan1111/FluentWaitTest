const express = require('express');
const bodyparser = require('body-parser');
const cors = require('cors');
const sql = require('mssql');
const Chart = require('chart.js');

const app = express();
app.use(cors());
app.use(bodyparser.json());

var dbConfig = {
  server: '{hostname}\\MSSQLSERVER02',
  database: 'master',
  user: 'sa',
  password: 'password',
  options: {
    encrypt: true,
    enableArithAbort: true,
    trustServerCertificate: true,
  },
};

// Fetch the page load times from the SQL Server database
async function getPageLoadTimes(pageName) {
  try {
    await sql.connect(dbConfig);

    let query = 'SELECT * FROM Performance';
    if (pageName) {
      query += ` WHERE PageName = '${pageName}'`;
    }

    const result = await sql.query(query);

    return result.recordset;
  } catch (error) {
    console.error('Error fetching page load times:', error);
    throw error;
  } finally {
    await sql.close();
  }
}

// Generate a random color
function getRandomColor() {
  const letters = '0123456789ABCDEF';
  let color = '#';
  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
}

// Route for rendering the chart page
app.get('/', async (req, res) => {
  try {
    const pageName = req.query.page || '';

    const pageLoadTimes = await getPageLoadTimes(pageName);

    // Prepare the chart data
    const datasets = []; // Array of datasets for each page

    const currentDataset = {
      label: pageName,
      data: [],
      backgroundColor: getRandomColor(),
      borderColor: getRandomColor(),
      fill: false,
    };
    datasets.push(currentDataset);

    pageLoadTimes.forEach((entry) => {
      currentDataset.data.push(entry.LoadTime);
    });

    // Create the HTML page with the chart
    const chartHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Page Load Time Chart</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <div>
        <select id="pageSelect" onchange="updateChart()">
          <option value="">Select Page</option>
          <option value="Homepage">Homepage</option>
          <option value="About">About</option>
          <option value="Contact">Contact</option>
          <!-- Add more options for other page names -->
        </select>
      </div>
      <canvas id="chartCanvas"></canvas>
      <script>
        const ctx = document.getElementById('chartCanvas').getContext('2d');
        const chartConfig = {
          type: 'bar',
          data: {
            labels: [],
            datasets: ${JSON.stringify(datasets)},
          },
          options: {
            responsive: true,
            title: {
              display: true,
              text: 'Page Load Time',
            },
            scales: {
              x: {
                display: false,
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Load Time (ms)',
                },
              },
            },
          },
        };
        const chart = new Chart(ctx, chartConfig);

        function updateChart() {
          const pageSelect = document.getElementById('pageSelect');
          const selectedPage = pageSelect.value;
          if (selectedPage) {
            chart.data.datasets[0].label = selectedPage;
            chart.data.datasets[0].data = [];
            chart.update();

            fetch(`/loadtimes?page=${selectedPage}`)
              .then((response) => response.json())
              .then((data) => {
                chart.data.datasets[0].data = data.map((entry) => entry.LoadTime);
                chart.update();
              })
              .catch((error) => {
                console.error('Error fetching page load times:', error);
              });
          }
        }
      </script>
    </body>
    </html>
    `;

    // Set the response headers
    res.setHeader('Content-Type', 'text/html');
    res.send(chartHtml);
  } catch (error) {
    console.error('Error generating chart:', error);
    res.status(500).send('Error generating chart');
  }
});

// Start the server
app.listen(3000, () => {
  console.log(`Server is listening on http://localhost:3000`);
});
