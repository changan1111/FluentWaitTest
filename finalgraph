// Route for rendering the chart page
app.get('/', async (req, res) => {
  try {
    const pageLoadTimes = await getPageLoadTimes();

    // Prepare the chart data grouped by date
    const dates = []; // Array of dates
    const dateDatasets = []; // Array of datasets for each date

    // Prepare the chart data grouped by page
    const pageNames = []; // Array of page names
    const pageDatasets = []; // Array of datasets for each page

    // Iterate over the page load times and populate the dates and dateDatasets arrays
    // Populate the pageNames and pageDatasets arrays
    pageLoadTimes.forEach((entry) => {
      const date = entry.Date.toISOString().split('T')[0];
      const pageName = entry.PageName.toLowerCase();

      // Group by date
      const dateIndex = dates.indexOf(date);
      let dateDataset = dateDatasets.find((data) => data.label.toLowerCase() === pageName);
      if (dateIndex === -1) {
        dates.push(date);
      }
      if (!dateDataset) {
        dateDataset = {
          label: entry.PageName,
          data: [],
          backgroundColor: getRandomColor(),
          borderColor: getRandomColor(),
          fill: false
        };
        dateDatasets.push(dateDataset);
      }
      dateDataset.data[dateIndex] = entry.LoadTime;

      // Group by page
      const pageIndex = pageNames.indexOf(pageName);
      let pageDataset = pageDatasets.find((data) => data.label.toLowerCase() === pageName);
      if (pageIndex === -1) {
        pageNames.push(pageName);
      }
      if (!pageDataset) {
        pageDataset = {
          label: entry.PageName,
          data: [],
          backgroundColor: getRandomColor(),
          borderColor: getRandomColor(),
          fill: false
        };
        pageDatasets.push(pageDataset);
      }
      pageDataset.data.push(entry.LoadTime);
    });

    // Create the HTML page with the charts
    const chartHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Page Load Time Charts</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <div style="display: flex; justify-content: space-between;">

        <!-- Chart by Date -->
        <div style="width: 45%; border: 1px solid #ccc; padding: 20px; margin-right: 20px;">
          <h2>Page Load Time by Date</h2>
          <canvas id="chartByDateCanvas"></canvas>
        </div>

        <!-- Chart by Page -->
        <div style="width: 45%; border: 1px solid #ccc; padding: 20px;">
          <h2>Page Load Time by Page</h2>
          <canvas id="chartByPageCanvas"></canvas>
        </div>

      </div>
      <script>
        const ctxByDate = document.getElementById('chartByDateCanvas').getContext('2d');
        const chartByDateConfig = {
          type: 'line',
          data: {
            labels: ${JSON.stringify(dates)},
            datasets: ${JSON.stringify(dateDatasets)}
          },
          options: {
            responsive: true,
            title: {
              display: true,
              text: 'Page Load Time by Date'
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: 'Date'
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Load Time (ms)'
                }
              }
            }
          }
        };
        new Chart(ctxByDate, chartByDateConfig);

        const ctxByPage = document.getElementById('chartByPageCanvas').getContext('2d');
        const chartByPageConfig = {
          type: 'bar',
          data: {
            labels: ${JSON.stringify(pageNames)},
            datasets: ${JSON.stringify(pageDatasets)}
          },
          options: {
            responsive: true,
            title: {
              display: true,
              text: 'Page Load Time by Page'
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: 'Page'
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Load Time (ms)'
                }
              }
            }
          }
        };
        new Chart(ctxByPage, chartByPageConfig);
      </script>
    </body>
    </html>
    `;

    // Set the response headers
    res.setHeader('Content-Type', 'text/html');
    res.send(chartHtml);
  } catch (error) {
    console.error('Error generating charts:', error);
    res.status(500).send('Error generating charts');
  }
});
