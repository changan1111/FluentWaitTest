const express = require('express');
const app = express();
const port = 3000;
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const sql = require('mssql');

// Database configuration
const dbConfig = {
  user: 'your_username',
  password: 'your_password',
  server: 'your_server',
  database: 'your_database',
  options: {
    trustServerCertificate: true
  }
};

// Chart configuration
const chartConfig = {
  type: 'line',
  data: {
    labels: [], // Array of dates
    datasets: [] // Array of datasets for each page
  },
  options: {
    responsive: true,
    title: {
      display: true,
      text: 'Page Load Time'
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Date'
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Load Time (ms)'
        }
      }
    }
  }
};

// Fetch the page load times from the SQL Server database
async function getPageLoadTimes() {
  try {
    await sql.connect(dbConfig);

    const result = await sql.query('SELECT * FROM PageLoadTimes');

    return result.recordset;
  } catch (error) {
    console.error('Error fetching page load times:', error);
    throw error;
  } finally {
    await sql.close();
  }
}

// Generate a random color
function getRandomColor() {
  const letters = '0123456789ABCDEF';
  let color = '#';
  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
}

// Route for generating the chart
app.get('/', async (req, res) => {
  try {
    const pageLoadTimes = await getPageLoadTimes();

    // Prepare the chart data
    const dates = []; // Array of dates
    const datasets = []; // Array of datasets for each page

    // Iterate over the page load times and populate the dates and datasets arrays
    pageLoadTimes.forEach((entry) => {
      const date = entry.timestamp.toISOString().split('T')[0];
      const loadTime = entry.loadTime;

      // Find the index of the date in the dates array
      const dateIndex = dates.indexOf(date);

      // If the date is not found, add it to the dates array and create a new dataset
      if (dateIndex === -1) {
        dates.push(date);
        datasets.push({
          label: entry.pageName,
          data: [loadTime],
          backgroundColor: getRandomColor(),
          borderColor: getRandomColor(),
          fill: false
        });
      } else {
        // If the date is found, update the existing dataset
        datasets[dateIndex].data.push(loadTime);
      }
    });

    // Update the chart configuration with the prepared data
    chartConfig.data.labels = dates;
    chartConfig.data.datasets = datasets;

    // Generate the chart image
    const width = 800; // Width of the chart image
    const height = 400; // Height of the chart image
    const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height });
    const image = await chartJSNodeCanvas.renderToBuffer(chartConfig);

    // Set the response headers for the chart image
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Content-Length', image.length);

    // Send the chart image as the response
    res.send(image);
  } catch (error) {
    console.error('Error generating chart:', error);
    res.status(500).send('Error generating chart');
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is listening on http://localhost:${port}`);
});
