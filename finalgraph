// Route for rendering the chart page
app.get('/', async (req, res) => {
  try {
    const pageLoadTimes = await getPageLoadTimes();

    // Group the page load times by page name
    const pageGroups = {};
    pageLoadTimes.forEach((entry) => {
      const pageName = entry.PageName.toLowerCase();
      if (!pageGroups[pageName]) {
        pageGroups[pageName] = [];
      }
      pageGroups[pageName].push(entry.LoadTime);
    });

    // Prepare the chart data
    const datasets = [];
    let maxPageCount = 0;

    Object.entries(pageGroups).forEach(([pageName, loadTimes]) => {
      const pageCount = loadTimes.length;
      if (pageCount > maxPageCount) {
        maxPageCount = pageCount;
      }

      const bars = loadTimes.map((loadTime, index) => ({
        x: index + 1,
        y: loadTime,
      }));

      const dataset = {
        label: pageName,
        data: bars,
        backgroundColor: getRandomColor(),
        borderColor: getRandomColor(),
        fill: false,
      };

      datasets.push(dataset);
    });

    // Create the HTML page with the chart
    const chartHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Page Load Time Chart</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <canvas id="chartCanvas"></canvas>
      <script>
        const ctx = document.getElementById('chartCanvas').getContext('2d');
        const chartConfig = {
          type: 'bar',
          data: {
            labels: Array.from({ length: maxPageCount }, (_, i) => i + 1),
            datasets: ${JSON.stringify(datasets)}
          },
          options: {
            responsive: true,
            title: {
              display: true,
              text: 'Page Load Time'
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: 'Run Number'
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Load Time (ms)'
                }
              }
            }
          }
        };
        new Chart(ctx, chartConfig);
      </script>
    </body>
    </html>
    `;

    // Set the response headers
    res.setHeader('Content-Type', 'text/html');
    res.send(chartHtml);
  } catch (error) {
    console.error('Error generating chart:', error);
    res.status(500).send('Error generating chart');
  }
});
