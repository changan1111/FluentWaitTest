const express = require('express');
const bodyparser = require('body-parser');
const cors = require('cors');
const sql = require('mssql');
const Chart = require('chart.js');

const app = express();
app.use(cors());
app.use(bodyparser.json());

var dbConfig = {
  server: '{hostname}\\MSSQLSERVER02',
  database: 'master',
  user: 'sa',
  password: 'password',
  options: {
    encrypt: true,
    enableArithAbort: true,
    trustServerCertificate: true,
  },
};

// Fetch the page load times from the SQL Server database for the selected page
async function getPageLoadTimes(pageName) {
  try {
    await sql.connect(dbConfig);

    let query = 'SELECT * FROM Performance';
    if (pageName) {
      query += ` WHERE PageName = '${pageName}'`;
    }

    const result = await sql.query(query);

    return result.recordset;
  } catch (error) {
    console.error('Error fetching page load times:', error);
    throw error;
  }
}

// Fetch the summary statistics for the selected page
async function getPageSummaryStatistics(pageName) {
  try {
    await sql.connect(dbConfig);

    let query = `
      SELECT
        MIN(LoadTime) AS MinLoadTime,
        MAX(LoadTime) AS MaxLoadTime,
        AVG(LoadTime) AS AvgLoadTime
      FROM Performance`;

    if (pageName) {
      query += ` WHERE PageName = '${pageName}'`;
    }

    const result = await sql.query(query);

    return result.recordset[0];
  } catch (error) {
    console.error('Error fetching page summary statistics:', error);
    throw error;
  }
}

// Route for rendering the chart page
app.get('/', async (req, res) => {
  try {
    const selectedPage = req.query.page || '';

    const pageLoadTimes = await getPageLoadTimes(selectedPage);
    const summaryStatistics = await getPageSummaryStatistics(selectedPage);

    // Prepare the chart data
    const labels = [];
    const loadTimes = [];

    // Iterate over the page load times and populate the labels and loadTimes arrays
    pageLoadTimes.forEach((entry) => {
      labels.push(`Run ${entry.Run}`);
      loadTimes.push(entry.LoadTime);
    });

    // Create the HTML page with the chart and summary table
    const chartHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Page Load Time Chart</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <div>
        <h2>Select a Page:</h2>
        <select id="pageSelect" onchange="updateChartAndTable()">
          <option value="">All Pages</option>
          ${pageNames
            .map((page) => `<option value="${page.PageName}" ${page.PageName === selectedPage ? 'selected' : ''}>${page.PageName}</option>`)
            .join('')}
        </select>
      </div>
      <canvas id="chartCanvas"></canvas>
      <table id="summaryTable" border="1">
        <tr>
          <th>Page</th>
          <th>Min Load Time</th>
          <th>Max Load Time</th>
          <th>Average Load Time</th>
        </tr>
        <tr>
          <td>${selectedPage || 'All Pages'}</td>
          <td>${summaryStatistics.MinLoadTime || '-'}</td>
          <td>${summaryStatistics.MaxLoadTime || '-'}</td>
          <td>${summaryStatistics.AvgLoadTime || '-'}</td>
        </tr>
      </table>
      <script>
        const ctx = document.getElementById('chartCanvas').getContext('2d');
        let chart;

        function updateChartAndTable() {
          const selectedPage = document.getElementById('pageSelect').value;

          fetch(`/loadtimes?page=${selectedPage}`)
            .then((response) => response.json())
            .then((data) => {
              chart.data.labels = data.labels;
              chart.data.datasets[0].data = data.loadTimes;
              chart.update();

              document.getElementById('summaryTable').innerHTML = data.summaryTableHtml;
            })
            .catch((error) => {
              console.error('Error fetching page load times:', error);
            });
        }

        function createChart() {
          chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: ${JSON.stringify(labels)},
              datasets: [
                {
                  label: 'Load Time (ms)',
                  data: ${JSON.stringify(loadTimes)},
                  backgroundColor: 'rgba(54, 162, 235, 0.5)',
                  borderColor: 'rgba(54, 162, 235, 1)',
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              title: {
                display: true,
                text: 'Page Load Time',
              },
              scales: {
                yAxes: [
                  {
                    ticks: {
                      beginAtZero: true,
                    },
                  },
                ],
              },
            },
          });
        }

        document.addEventListener('DOMContentLoaded', () => {
          createChart();
        });
      </script>
    </body>
    </html>`;

    res.send(chartHtml);
  } catch (error) {
    console.error('Error processing request:', error);
    res.status(500).send('Internal Server Error');
  }
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
